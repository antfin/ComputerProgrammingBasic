{
  "name": "foreachasync",
  "version": "5.0.5",
  "description": "A node- and browser-ready async (now with promises) counterpart of Array.prototype.forEach",
  "homepage": "https://github.com/FuturesJS/forEachAsync",
  "main": "forEachAsync.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/FuturesJS/forEachAsync.git"
  },
  "keywords": [
    "futuresjs",
    "forEach",
    "for",
    "forEachAsync",
    "async",
    "futures",
    "promise",
    "promises",
    "each"
  ],
  "optionalDependencies": {
    "bluebird": "^2.5.3"
  },
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "http://coolaj86.com/"
  },
  "license": "Apache2",
  "bugs": {
    "url": "https://github.com/FuturesJS/forEachAsync/issues"
  },
  "dependencies": {
    "bluebird": "^2.5.3"
  },
  "readme": "forEachAsync\n===\n\nAnalogous to `[].forEach`, but handles items asynchronously with a final callback passed to `then`.\n\nThis is the most essential piece of the [`ArrayAsync`](https://github.com/FuturesJS/ArrayAsync) package.\n\nBrowser Installation\n===\n\nYou can install from bower:\n\n```bash\nbower install forEachAsync\n```\n\nOr download the raw file from <https://raw.github.com/FuturesJS/forEachAsync/master/forEachAsync.js>:\n\n```bash\nwget https://raw.github.com/FuturesJS/forEachAsync/master/forEachAsync.js\n```\n\n```javascript\n(function () {\n  'use strict';\n\n  var forEachAsync = window.forEachAsync\n    ;\n\n  // do stuff ...\n}());\n```\n\nIf you need both 3.x and 4.x version of `forEachAsync` in the browser... don't do that...\n```\n\nNode Installation\n===\n\n```bash\nnpm install --save forEachAsync@4.x\n```\n\n\nv4.x - Promise Edition\n===\n\nThis backwards-compatible version works with Promises and callbacks.\n\nYou can use `resolve` as you would have used `next` previously, or you can return a promise of your own.\n\nUsage (with Promises)\n-----\n\n```javascript\n  // EXAMPLE ASYNC FUNCTION (node)\n  function getPicsAsync(animal) {\n    var flickerApi = \"http://api.flickr.com/services/feeds/photos_public.gne?tagmode=any&format=json&tags=\" + animal;\n\n    return requestAsync({ url: flickerApi });\n  }\n```\n\n```javascript\n  forEachAsync(['dogs', 'cats', 'octocats'], function (resolve, element) {\n    return getPicsAsync(element);\n  }).then(function () {\n    // then after all of the elements have been handled\n    // the final callback fires to let you know it's all done\n    console.log('All requests have finished');\n  });\n```\n\n\nIf you need reject, it's the last parameter\n\n```javascript\n  forEachAsync(['dogs', 'cats', 'octocats'], function (resolve, element, index, array, reject) {\n  });\n```\n\nUsage (without Promises)\n-----\n\nLet's say you have a function that gets pictures from the flickr api that's something like this:\n\n```javascript\n  // EXAMPLE ASYNC FUNCTION (browser)\n\n  function getPics(animal, cb) {\n    var flickerApi = \"http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?\";\n\n    $.getJSON(\n      flickerApi\n    , { tags: animal\n      , tagmode: \"any\"\n      , format: \"json\"\n      , success: function (data) {\n          console.log('teh animals:', data);\n        }\n      , complete: cb\n      }\n    );\n  }\n```\n\nYou would use `forEachAsync` like this:\n\n```javascript\n  // waits for one request to finish before beginning the next\n  forEachAsync(['dogs', 'cats', 'octocats'], function (resolve, element) {\n    return new Promise(function (resolve) {\n      getPics(element, resolve);\n    })\n  }).then(function () {\n    // then after all of the elements have been handled\n    // the final callback fires to let you know it's all done\n    console.log('All requests have finished');\n  });\n```\n\nAPI\n===\n\n**`forEachAsync(array, callback[, thisArg])`**\n\nParameters\n\n  * `array` Array of elements to iterate over\n  * `callback` Function to execute for each element, takes 4 arguments\n    * `resolve` if you don't return a Promise, you must use this as your callback\n    * `element` a single element of the aforementioned array\n    * `index` the index of the current element\n    * `array` the same array mentioned above\n  * `thisArg` Object to use as `this` when executing `callback`\n\n**`forEachAsync#then(done)`**\n\nParameters\n\n  * `then` is in the return value of `forEachAsync` and accepts a final `done` callback.\n    * `done` called after `forEachAsync` is complete, takes no arguments\n\nInternal API\n===\n\n`forEachAsync.__BREAK`\n\nThis is used internally for the purposes of the `ArrayAsync` library.\n\nPlease don't `break` stuff; use [`ArrayAsync`](https://github.com/FuturesJS/ArrayAsync)`.someAsync` or [`ArrayAsync`](https://github.com/FuturesJS/ArrayAsync)`.everyAsync` instead.\n",
  "readmeFilename": "README-4.md",
  "_id": "foreachasync@5.0.5",
  "_from": "foreachasync@^3.0.0"
}
